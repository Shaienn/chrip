{
    function html_inline(html_class, content){
        var text = '';
        text += '<span class="';
        text += html_class;
        text += '">';
        text += content;
        text += '</span>';
        return text;
    }

    function html_inline_with_controls(html_class, c) {
        var content = surrounded_with_controls(c);
        return html_inline(html_class, content);
    }

    function html_s(html_class, content){
       var text = '';
        text += '<s class="';
        text += html_class;
        text += '">';
        text += content;
        text += '</s>';
        return text;
        
    }

    function html_block(html_class, content){
        var text = '';
        text += '<p class="';
        text += html_class;
        text += '">';
        text += content;
        text += '</p>';
        return text;
    }

    function html_control(control_type){
        return html_inline("control-chars", control_type);
    }

    function surrounded_with_controls(c){
        return html_control(c[0]) + c[1] + html_control(c[2]);
    }

}


start
  = c:(block+) n:(newlines_or_not) { return c.join("") + n}


block
  = comment_block
  / guitar_comment_block
  / code_comment_block
  / verse
  / chorus
  / bridge
  / transposition_block


slide_or_block
  = c: (slide_start block_content slide_end) {return html_s('slide', c[1])}
  / c: (newline_or_not block_content) {return c[0] + c[1]}

slide_start
  = c:("{start_of_slide}" newline?) { return c.join("")}
  / c:("{sos}" newline?) { return c.join("")}

slide_end
  = c:("{end_of_slide}" newline?) { return c.join("")}
  / c:("{eos}" newline?) { return c.join("")}


verse
  = c:(newline newlines_or_not (slide_or_block)+) 
            { return c[0]  + c[1] + html_block('verse', c[2].join(""))}

chorus
  = c:(newlines_or_not chorus_start (slide_or_block+) chorus_end) 
            { return c.shift() 
                  + html_inline("control-chars", c[0])
                  + html_block('chorus', c[1].join("")) 
                  + html_inline("control-chars", c[2])
            }

chorus_start
  = c:("{start_of_chorus}" newline?) { return c.join("")}
  / c:("{soc}" newline?) { return c.join("")}

chorus_end
  = c:("{end_of_chorus}" newline) { return c.join("")}
  / c:("{eoc}" newline) { return c.join("")}

bridge
  = c:(newlines_or_not bridge_start (slide_or_block+) bridge_end) 
            { return c.shift()
                  + html_inline("control-chars", c[0])
                  + html_block('bridge', c[1].join(""))
                  + html_inline("control-chars", c[2])
            }

bridge_start
  = c:("{start_of_bridge}" newline?) { return c.join("")}
  / c:("{sob}" newline?) { return c.join("")}

bridge_end
  = c:("{end_of_bridge}" newline) { return c.join("")}
  / c:("{eob}" newline) { return c.join("")}


comment_block
  = c:(newlines_or_not "{comment: " line_chars "}" newline &newline) { return c.shift() + html_inline_with_controls('comment', c) + c[3]}

guitar_comment_block
  = c:(newlines_or_not "{guitar_comment: " line_chars "}" newline &newline) { return c.shift() + html_inline_with_controls('guitar_comment', c) + c[3]}

transposition_block
  = c:(newlines "{transposition: " digits "}" newline &newline) { return c.shift() + html_inline_with_controls('transposition positive', c) + c[3]}
  / c:(newlines "{transposition: -" digits "}" newline &newline) { return c.shift() + html_inline_with_controls('transposition negative', c) + c[3]}

code_comment_block
  = c:(newlines code_comment_line+) { return c[0] + c[1].join("")}

code_comment_line
  = c:("#" no_newline newline) { return html_block('code-comment', c.join(""))}

block_content
  = c:(line_content+) { return c.join("")}

line_content
  = c:(line_chars newline) { return c.join("")}
  / s:(" "*) c:guitar_comment_line { return s.join("") + c}
  / comment_line

line_chars
  = c:(line_char+) { return c.join("")}

guitar_comment_line
  = c:("{guitar_comment: " line_chars "}" newline) { return html_inline_with_controls('guitar_comment', c) + c[3]}

comment_line
  = c:("{comment: " line_chars "}" newline) { return html_inline_with_controls('comment', c) + c[3]}

line_char
  = safe_char
  / chord
  / repeat
  / echo
  / partition

safe_chars_or_chord
  = c:(safe_char_or_chord+) { return c.join("")}

safe_char_or_chord
    = safe_char
    / chord

chord_name
  = c:(chord_char+) { return c.join("")}

chord_char
  = safe_char
  / "#"

safe_chars
  = c:(safe_char+) { return c.join("")}

safe_char
  = [^\\\n\r{}$\[\]~#]

chord
  = c:single_chord+ { return html_inline('chord', c.join(""))}

single_chord
  = c:("[" chord_name "]") { return surrounded_with_controls(c)}

echo
  = c:("{echo: " safe_chars_or_chord "}") { return html_inline_with_controls('echo', c)}

partition
  = c:("{partition: " safe_chars "}") { return html_inline_with_controls('partition', c)}

repeat
  = c:("{repeat: " digits "}") { return html_inline_with_controls('repeat', c)}

digits
  = c:[0-9]+ {return c.join("")}

newline
  = "\r\n" {return "\n"}
  / "\r" {return "\n"}
  / "\n"

newlines_or_not
  = newlines
  / ""

newline_or_not
  = newline
  / ""

newlines
  = c:(newline+) { return c.join("")}

no_newline
  = c:[^\n]* {return c.join("")}
