{
  "name": "nw-builder",
  "version": "2.1.0",
  "description": "nw-builder",
  "main": "index.js",
  "scripts": {
    "test": "colortape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mllrsohn/nw-builder.git"
  },
  "bin": {
    "nwbuild": "./bin/nwbuild"
  },
  "author": {
    "name": "Steffen Müller"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mllrsohn/nw-builder/issues"
  },
  "homepage": "https://github.com/mllrsohn/nw-builder",
  "keywords": [
    "NW.js",
    "node-webkit",
    "desktop",
    "application"
  ],
  "devDependencies": {
    "nock": "^0.32.3",
    "tape": "~3.0.1",
    "redtape": "~1.0.0",
    "colortape": "~0.1.0"
  },
  "dependencies": {
    "archiver": "^0.13.0",
    "bluebird": "~1.2.2",
    "decompress-zip": "0.0.8",
    "inherits": "~2.0.1",
    "lodash": "~2.4.1",
    "optimist": "^0.6.1",
    "rcedit": "0.2.0",
    "plist": "^1.0.0",
    "progress": "~1.1.7",
    "request": "~2.40.0",
    "rimraf": "^2.2.8",
    "semver": "^2.3.1",
    "simple-glob": "~0.1.0",
    "tar-fs": "^0.3.2",
    "temp": "~0.7.0",
    "update-notifier": "^0.1.8",
    "winresourcer": "^0.9.0",
    "platform-overrides": "~1.0.1",
    "graceful-ncp": "^2.0.0",
    "graceful-fs-extra": "^1.0.4"
  },
  "readme": "# nw-builder [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n\n[![NPM](https://nodei.co/npm/nw-builder.png?downloads=true)](https://nodei.co/npm/nw-builder/)\n\n> Lets you build your [NW.js](https://github.com/nwjs/nw.js) apps for mac, win and linux via cli. It will download the prebuilt binaries for a newest version, unpacks it, creates a release folder, create the app.nw file for a specified directory and copies the app.nw file where it belongs.\n\n\n### Installation\n\n##### Local\n```shell\nnpm install nw-builder --save-dev\n```\n\n##### Global\n```shell\nnpm install nw-builder -g\n```\n\n##### Grunt and Gulp Plugins\nYes, there is also a [Grunt Plugin](https://github.com/nwjs/grunt-nw-builder). For Gulp, just use the module :)\n\n\n## Usage\n\n```shell\nUsage: nwbuild [options] [path]\n\nOptions:\n  -p, --platforms      Platforms to build, comma-sperated, can be: win32,win64,osx32,osx64,linux32,linux64   ['osx32', 'osx64', 'win32', 'win64']\n  -v, --version        The nw version, eg. 0.8.4                                             [default: \"latest\"]\n  -r, --run            Runs NW.js for the current platform                                   [default: false]\n  -o, --buildDir       The build folder                                                      [default: \"./build\"]\n  -f, --forceDownload  Force download of NW.js                                               [default: false]\n  --cacheDir           The cache folder\n  --quiet              Disables logging                                                      [default: false]\n\n```\n#### Run NW.js\nDuring development you can run NW.js with `nwbuild -r path/to/your/younwapp/`\n\nOr use the module:\n\n```js\nvar NwBuilder = require('nw-builder');\nvar nw = new NwBuilder({\n    files: './path/to/nwfiles/**/**', // use the glob format\n    platforms: ['osx32', 'osx64', 'win32', 'win64']\n});\n\n//Log stuff you want\n\nnw.on('log',  console.log);\n\n// Build returns a promise\nnw.build().then(function () {\n   console.log('all done!');\n}).catch(function (error) {\n    console.error(error);\n});\n```\n\n`build` also supports callbacks:\n\n```javascript\nnw.build(function(err) {\n    if(err) console.log(err);\n})\n\n```\n\n### Options\n\n#### options.files *Required*\nType: `String`  \nDefault value: `null`  \n\nThe path to your node webkit app. It supports [simple-glob](https://github.com/jedmao/simple-glob) so you can do stuff like `['foo/*.js', '!foo/bar.js', 'foo/bar.js']`.\n\n\n#### options.version\nType: `String`\nDefault value: `'latest'`\n\nThe version of NW.js you want to use. Per default it looks up the latest version. [Here is a list](https://github.com/nwjs/nw.js/wiki/Downloads-of-old-versions) of all available releases\n\n#### options.platforms\nType: `Array`  \nDefault value: `['osx32', 'osx64', 'win32', 'win64']`\n\nThe platforms you want to build. Can be `['win32', 'win64', 'osx32', 'osx64', 'linux32', 'linux64']`\n\nThe values `['win', 'osx', 'linux']` can also be used and will build both the 32 and 64 bit versions of the specified platforms.\n\n#### options.appName\nType: `String`  \nDefault value: `false`  \n\nThe Name of your NW.js app. If this value is set to null, it will autodetect the `name` from your projects package.json. This will be used to generate a plist file for mac.\n\n#### options.appVersion\nType: `String`  \nDefault value: `false`  \n\nThe version of your NW.js app. If this value is set to null, it will autodetect the `version` form your projects package.json. This will be used to generate a plist file for mac.\n\n#### options.buildDir\nType: `String`  \nDefault value: `./build`  \n\nThis is where the releases are saved.\n\n#### options.cacheDir\nType: `String`  \nDefault value: `./cache`  \n\nThis is where the cached NW.js downloads are\n\n#### options.buildType\nType: `String` or `function`\nDefault value: `default`  \n\nHow you want to save your build.\n\n* `default` [appName]\n* `versioned` [appName] -v[appVersion]\n* `timestamped` [appName] - [timestamp];\n* A function with options as scope (e.g `function () {return this.appVersion;}` )\n\n#### options.forceDownload\nType: `Boolean`  \nDefault value: `false`  \n\nThis will delete everything in your `build_dir` directory, including the cached downloaded prebuilt binaries\n\n#### options.macCredits\nType: `String`  \nDefault value: `false`  \n\nMAC ONLY: The path to your credits.html file. If your don't provide your own it will use the one provided by NW.js\n\n#### options.macIcns\nType: `String`  \nDefault value: `false`  \n\nMAC ONLY: The path to your ICNS icon file. If your don't provide your own it will use the one provided by NW.js\n\n#### options.macZip\nType: `Boolean`  \nDefault value: `false`  \n\nMAC ONLY: Use a `app.nw` folder instead of `ZIP` file, this significantly improves the startup speed of applications on `mac`, since no decompressing is needed. Builds on other platforms will still use `ZIP` files.\n\n#### options.macPlist\nType: `String` or `Object`  \nDefault value: `false`  \n\nMAC ONLY: Pass a string containing the path to your own plist file. If a string isn't passed, a plist file will be generated from your package.json. Pass an object to overwrite or add properties to the generated plist file.\n\n#### options.winIco\nType: `String`  \nDefault value: `null`  \n\nWINDOWS ONLY: The path to your ICO icon file. If your don't provide your own it will use the one provided by NW.js. If you are building on MAC or LINUX you must have [Wine](https://www.winehq.org/) installed to use this option.\n\n### Manifest Options\n\n#### platformOverrides\n\nAllows you to specify platform-specific manifest values. Example manifest:\n\n```json\n{\n    \"name\": \"nw-demo\",\n    \"version\": \"0.1.0\",\n    \"main\": \"index.html\",\n    \"window\": {\n        \"frame\": false,\n        \"toolbar\": false\n    },\n    \"platformOverrides\": {\n        \"win\": {\n            \"window\": {\n                \"toolbar\": true\n            }\n        },\n        \"win32\": {\n            \"window\": {\n                \"frame\": true,\n                \"toolbar\": false\n            }\n        },\n        \"win64\": {\n            \"window\": {\n                \"frame\": true\n            }\n        },\n        \"osx\": {\n            ...\n        },\n        \"osx32\": {\n            ...\n        },\n        \"osx64\": {\n            ...\n        },\n        \"linux\": {\n            ...\n        },\n        \"linux32\": {\n            ...\n        },\n        \"linux64\": {\n            ...\n        },\n    }\n\n```\n\nThe platform-specific options will override the others only when building that platform only and the `platformOverrides` property will be removed.\n\nFor example, when building for Windows, the manifest generated and put into the end app (from the manifest above) would be:\n\n```json\n{\n    \"name\": \"nw-demo\",\n    \"version\": \"0.1.0\",\n    \"main\": \"index.html\",\n    \"window\": {\n        \"frame\": true,\n        \"toolbar\": false\n    }\n}\n```\n\nAdditionally, when specifying multiple version of the same platform such as \"win\", \"win32\", and \"win64\", changes will be applied such that \"win\" applies to both \"win32\" and \"win64\", while \"win32\" and \"win64\" apply only to the specified version. Also note that \"win32\" and \"win64\" can further override changes made in \"win\".\n\nSee [#85](https://github.com/nwjs/nw-builder/issues/85) and [#94](https://github.com/nwjs/nw-builder/pull/94) for more information. If you need this during development too, see [platform-overrides](https://github.com/adam-lynch/platform-overrides) and [gulp-platform-overrides](https://github.com/adam-lynch/gulp-platform-overrides). There is no Grunt plugin, [yet](https://github.com/new).\n\n## Troubleshooting\n\n### OSX ulimit\n\nDarwin (OS X kernel) has a low limit for file descriptors (256 per process) by default, so you might get an `EMFILE` error or an error mentioning \"too many open files\" if youtry to open more file descriptors than this.\n\nTo get around it, run `ulimit -n 1024` (or add it to your `~/.bash_profile`). For more information, see [henvic/osx-ulimit](https://github.com/henvic/osx-ulimit).\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Release History\n- 2015-12-06    `2.1.0` added `cacheDir` command-line option, fix for no info being passed back, etc.\n- 2015-06-28    `2.0.2` put upper bound to semver check for windows.\n- 2015-06-14    `2.0.1` safer validation of versions.\n- 2015-06-14    `2.0.0` changed to nw-builder, etc.\n- 2015-05-05    `1.0.12` when using latest NW.js version, it's first validated that it's not an alpha version (fixes [#222](https://github.com/nwjs/nw-builder/issues/222)). Plus a fix for the `winIco` & `macIcns` command line options\n- 2015-01-29    `1.0.8` fixed EMFILE errors (see [#147](https://github.com/nwjs/nw-builder/issues/147) [#148](https://github.com/nwjs/nw-builder/pull/148))\n- 2015-01-21    `1.0.7` fixed about screen when copyright is not supplied\n- 2015-01-15    `1.0.6` fixed downloads for nw.js version 0.12.0-alpha1\n- 2015-01-15    `1.0.5` fixed downloads for NW.js versions < 0.12.0-alpha\n- 2014-12-12    `1.0.0` 64-bit support, improved platform-overrides and no more EMFILE errors.\n- 2014-12-07    `0.4.0` macPlist CFBundleIdentifier is generated from `package.json` (see [#131](https://github.com/nwjs/nw-builder/pull/131))\n- 2014-11-14    `0.3.0` macPlist option improvements (see [#96](https://github.com/nwjs/nw-builder/pull/96))\n- 2014-10-30    `0.2.0` adds support for platform-specific manifest overrides (see [#94](https://github.com/nwjs/nw-builder/pull/94))\n- 2014-08-19    `0.1.2` adds a progress bar to downloads, fixes downloading through a proxy, fixed winIco, bug fixes\n- 2014-08-01    `0.1.0` use app filename for generated executables, optimized version checking, (known issue: `winIco` on windows)\n- 2014-07-31    `0.0.4` fixed compatibility with nodewebkit 0.10.0\n- 2014-04-20    Added run option, bug fixes\n- 2014-04-13    Preview Release\n## License\n\n[MIT License](https://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://www.npmjs.com/package/nw-builder\n[npm-image]: https://img.shields.io/npm/v/nw-builder.svg?style=flat\n\n[travis-url]: https://travis-ci.org/mllrsohn/nw-builder\n[travis-image]: https://img.shields.io/travis/mllrsohn/nw-builder/master.svg?style=flat\n\n[depstat-url]: https://david-dm.org/mllrsohn/nw-builder\n[depstat-image]: https://david-dm.org/mllrsohn/nw-builder.svg?style=flat\n",
  "readmeFilename": "README.md",
  "_id": "nw-builder@2.1.0",
  "dist": {
    "shasum": "4bf7b0e6289568e84d99da2d9bccd0874d24a9df"
  },
  "_from": "nw-builder@^2.0.0",
  "_resolved": "https://registry.npmjs.org/nw-builder/-/nw-builder-2.1.0.tgz"
}
